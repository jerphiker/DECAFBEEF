class Lang0

token TYPE NAME NUM '=' NOTNL
token 'if' 'else'
token '(' ')'
token OPERATOR
token ';' ',' 'const'
token '{' '}' 'return'

prechigh
  left '*' '/'
  left '+' '-'
  left '==' OPERATOR
preclow

start s
rule

s : decls                              { result = Root.new("Start", nil, val[0]) }
  | decls statement_list decls         { result = Root.new("Start", nil, val[0], val[1], val[2]) }

decls : TYPE decl_list ';' decls            { result = Decls.new("Decls", val[0], val[1], val[3])}
      | "const" TYPE decl_list ';' decls    { result = Decls.new("Decls", val[0], val[2], val[4])}
      |

decl_list : decl                            { result = DeclList.new("Decl List", nil, val[0])}
          | decl_list ',' decl              { result = DeclList.new("Decl List", nil, val[0], val[2])}

decl : NAME                                 { result = Dec.new("Assignment", nil, DirectDec.new("NAME", val[0]))}
     | NAME '=' expr                        { result = Dec.new("=", nil, DirectDec.new("NAME", val[0]),val[2])}

statement_list : statement                  { result = StateList.new("Statement List", nil, val[0]) } 
  | statement_list statement                { result = StateList.new("Statement List", nil, val[0], val[1]) }

statement : cmpnd_state                                { result = StateList.new("Statement List", nil, val[0]) }
  | 'if' '(' expr ')' cmpnd_state                      { result = IfNode.new("If", nil, val[2], val[4], Lambda.new("Lambda", nil))}
  | 'if' '(' expr ')' cmpnd_state 'else' cmpnd_state   { result = IfNode.new("IfElse", nil, val[2], val[4], Lambda.new("Lambda", nil), val[6], Lambda.new("Lambda", nil))}
  | 'while' '(' expr ')' cmpnd_state                   { result = WhileNode.new("While", nil, val[2], val[4], Lambda.new("Lambda", nil)) }
  | 'return' ';'                                       { result = Expr.new("Expr", val[0]) }
  | 'return' expr ';'                                  { result = Expr.new("Expr", val[0], val[1]) }
  | expr ';'                                           { result = Expr.new("Expr", nil, val[0]) }

cmpnd_state : '{' decls '}'                            { result = CmpndState.new("Compound Statements", nil, val[1]) }
  | '{' decls statement_list '}'                       { result = CmpndState.new("Compound Statements", nil, val[1], val[2]) }


expr :  expr OPERATOR expr                  { result = Expr.new("Operator", val[1], val[0], val[2]) }
     | expr '=' expr                        { result = Expr.new("Operator", val[1], val[0], val[2]) }
     | expr '+' expr                        { result = Expr.new("Operator", val[1], val[0], val[2]) }
     | expr '-' expr                        { result = Expr.new("Operator", val[1], val[0], val[2]) }
     | expr '*' expr                        { result = Expr.new("Operator", val[1], val[0], val[2]) }
     | expr '/' expr                        { result = Expr.new("Operator", val[1], val[0], val[2]) }
     | '(' expr ')'                         { result = val[1] }
     | NAME                                 { result = Literal.new("NAME", val[0]) }
     | NUM                                  { result = Literal.new("NUM", val[0]) }

end

---- header ----

require "./AST.rb"
require "./lang0.rex"
require "./symtab.rb"
require "./ir.rb"

---- footer ----

class Lang0WithErrors < Lang0
  def initialize
    @yydebug = true
  end
  # https://github.com/JasonBarnabe/racc/blob/aef0fb1a9d20770bf0416286e8085c6f26fa7363/lib/racc/parser.rb#L542
  def on_error(t, val, vstack)
    errcontext = (@ss.pre_match[-10..-1] || @ss.pre_match) +
  				@ss.matched + @ss.post_match[0..9]
    raise ParseError, sprintf("\nparse error on value %s (%s) " +
  							"around \"%s\"",
  							val.inspect, token_to_str(t) || '?',
  							errcontext)
  end
end

outname = "OUTPUT"
unless ARGV.length == 0
  outname = ARGV[0]
end

#puts outname

outa = File.open(outname + ".a", "w")
outp = File.open(outname + ".p", "w")
outerr = File.open(outname + ".err", "w")
outir = File.open(outname + ".ir", "w")

exe = Lang0WithErrors.new
    begin
      ast = Ast.new(exe.scan_str($stdin.read))
      sym = SymbolTable.new
      ast.accept(sym, outa, outp, outir)
      ast.accept(AstVisitorPass1.new, outa, outp, outir)
      ast.accept(AstVisitorPass2.new, outa, outp, outir)
      # p sym.table
      # p sym.namespace
      ir = IRPass1.new(outa, outp, outir, sym, ast, 0)
      ast.accept(ir, outa, outp, outir)
      ir2 = IRPass2.new(outa, outp, outir, sym, ast, ir.expr_counter)
      ast.accept(ir2, outa, outp, outir)
      ir3 = IRPass3.new(outa, outp, outir, sym, ast, ir2.expr_counter)
      ast.accept(ir3, outa, outp, outir)
      #ast.accept(AstVisitorPass1.new, outa, outp, outir)
      #ast.accept(AstVisitorPass2.new, outa, outp, outir)
    rescue ParseError => e
      outerr << 'Parsing error' << "\n"
      outerr << e.message << "\n"
      outerr << e.backtrace.inspect << "\n"
      raise SystemExit.new(1)
    end

outa.close
outp.close
outerr.close
outir.close

