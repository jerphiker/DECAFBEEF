class Lang0

token TYPE NAME NUM '='
token 'if' 'else'
token '(' ')'
token OPERATOR
token ';' ',' 'const'
token '{' '}' 'return'

start s
rule

s : decs states                                     { result = Root.new("S", nil, val[0], val[1]) }

decs : TYPE decbody ';' decs                        { result = Decs.new("DECS", val[0], val[1], val[3]) }
    | 'const' TYPE decbody ';' decs                 { result = Decs.new("CONSTDEC", val[1], val[2], val[4]) }
    |                                               { result = nil }

decbody : NAME ',' decbody                          { result = DecBody.new("DECBODY", nil, Expr.new("NAME", val[0]), val[2]) }
    | NAME                                          { result = Expr.new("NAME", val[0]) }
	  | assignment                                    { result = Expr.new("ASSIGN", nil, val[0]) }

assignment : NAME '=' expr                          { result = Assign.new("=", nil, Expr.new("NAME", val[0]), val[2]) }

states : rxpr ';' states                            { result = States.new("STATES", nil, val[0], val[2]) }
      | if states                                   { result = States.new("STATES", "block", val[0], val[1]) }
      |                                             { result = nil }

rxpr : 'return' expr                                { result = RExpr.new("RETURN", nil, val[0]) }
     | expr                                         { result = val[0] }

expr :  NAME OPERATOR expr                          { result = Expr.new("EXPR", val[1], Expr.new("NAME", val[0]), val[2]) }
     | NUM OPERATOR expr                            { result = Expr.new("EXPR", val[1], Expr.new("NUM", val[0]), val[2]) }
     | '(' expr ')' OPERATOR expr                   { result = Expr.new( nil, nil, val[3], val[1], val[4]) }
     | '(' expr ')'                                 { result = val[1] }
     | NAME                                         { result = Expr.new("NAME", val[0]) }
     | NUM                                          { result = Expr.new("NUM", val[0]) }
     | assignment                                   { result = Expr.new("ASSIGN", nil, val[0]) }


if : 'if' '(' expr ')' '{' states '}' 'else'  rxpr ';'      { result = IfNode.new("IFELSE", nil, val[2], val[5], val[8]) }
   | 'if' '(' expr ')' '{' states '}' 'else'  if            { result = IfNode.new("IFELSE", nil, val[2], val[5], val[8]) }
   | 'if' '(' expr ')' '{' states '}' 'else' '{' states '}' { result = IfNode.new("IFELSE", nil, val[2], val[5], val[9]) }
   | 'if' '(' expr ')' '{' states '}'                       { result = IfNode.new("IF", nil, val[2], val[5]) }

end

---- header ----

require "./AST.rb"
require "./symtab.rb"
require "./test_lan.rex"

---- footer ----

exe = Lang0.new
    begin
      ast = Ast.new(exe.scan_str($stdin.read))
      sym = SymbolTable.new
      ast.accept(sym)
      ast.accept(AstVisitor.new)
      p sym.table
      puts
      p sym.namespace
    rescue ParseError => e
      puts 'Parsing error'
      puts e.message
      puts e.backtrace.inspect
    end


