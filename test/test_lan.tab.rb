#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.11
# from Racc grammer file "".
#

require 'racc/parser.rb'


require "./AST.rb"
require "./symtab.rb"
require "./test_lan.rex"

class Lang0 < Racc::Parser
##### State transition tables begin ###

racc_action_table = [
     7,    12,    23,    15,    29,    13,     7,    12,    36,    15,
    21,    13,     3,    10,     3,     7,    12,    30,    15,    10,
    13,     7,    12,     4,    15,     4,    13,     3,    10,    28,
     7,    12,    51,    15,    10,    13,     7,    12,     4,    15,
    17,    13,    17,    10,    40,     7,    12,     7,    12,    10,
    13,    41,    13,     7,    12,     7,    12,    42,    13,    21,
    13,     7,    12,    26,    22,    20,    13,     7,    12,     7,
    12,    45,    13,    19,    13,    47,    48,    17,    52,     5,
    54 ]

racc_action_check = [
    23,    23,     8,    23,    16,    23,    51,    51,    27,    51,
    17,    51,     0,    23,    29,     2,     2,    17,     2,    51,
     2,    48,    48,     0,    48,    29,    48,    40,     2,    15,
    45,    45,    48,    45,    48,    45,     9,     9,    40,     9,
    19,     9,    30,    45,    31,    28,    28,    13,    13,     9,
    28,    36,    13,    10,    10,    26,    26,    37,    10,     7,
    26,    41,    41,    12,     7,     5,    41,    21,    21,    22,
    22,    42,    21,     4,    22,    46,    47,     3,    49,     1,
    53 ]

racc_action_pointer = [
    10,    79,    12,    74,    71,    65,   nil,    54,    -9,    33,
    50,   nil,    53,    44,   nil,    21,    -7,     5,   nil,    37,
   nil,    64,    66,    -3,   nil,   nil,    52,    -1,    42,    12,
    39,    33,   nil,   nil,   nil,   nil,    41,    48,   nil,   nil,
    25,    58,    57,   nil,   nil,    27,    60,    69,    18,    67,
   nil,     3,   nil,    65,   nil ]

racc_action_default = [
    -4,   -25,   -11,   -25,   -25,   -25,    -1,   -18,   -25,   -11,
   -25,   -13,   -19,   -25,   -20,   -25,   -25,    -6,    -7,   -25,
    55,   -25,   -25,   -11,   -10,   -12,   -25,   -25,   -25,    -4,
   -25,   -25,    -8,   -14,    -9,   -15,   -17,   -25,    -2,    -5,
    -4,   -25,   -25,    -3,   -16,   -11,   -25,   -24,   -25,   -25,
   -22,   -11,   -21,   -25,   -23 ]

racc_goto_table = [
     6,     2,    25,     1,    49,    27,    50,    24,    16,    18,
   nil,   nil,   nil,    32,    33,   nil,   nil,   nil,    35,   nil,
    37,    34,   nil,   nil,    31,    18,   nil,   nil,   nil,   nil,
    38,   nil,   nil,    44,   nil,    39,    18,   nil,   nil,   nil,
   nil,    43,   nil,    46,   nil,   nil,   nil,   nil,   nil,    53 ]

racc_goto_check = [
     3,     2,     6,     1,     7,     6,     8,     3,     4,     5,
   nil,   nil,   nil,     6,     6,   nil,   nil,   nil,     6,   nil,
     6,     3,   nil,   nil,     4,     5,   nil,   nil,   nil,   nil,
     2,   nil,   nil,     6,   nil,     4,     5,   nil,   nil,   nil,
   nil,     2,   nil,     3,   nil,   nil,   nil,   nil,   nil,     3 ]

racc_goto_pointer = [
   nil,     3,     1,    -2,     5,     6,    -8,   -44,   -42 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,    14,    11,     8,     9 ]

racc_reduce_table = [
  0, 0, :racc_error,
  2, 18, :_reduce_1,
  4, 19, :_reduce_2,
  5, 19, :_reduce_3,
  0, 19, :_reduce_4,
  3, 21, :_reduce_5,
  1, 21, :_reduce_6,
  1, 21, :_reduce_7,
  3, 22, :_reduce_8,
  3, 20, :_reduce_9,
  2, 20, :_reduce_10,
  0, 20, :_reduce_11,
  2, 24, :_reduce_12,
  1, 24, :_reduce_13,
  3, 23, :_reduce_14,
  3, 23, :_reduce_15,
  5, 23, :_reduce_16,
  3, 23, :_reduce_17,
  1, 23, :_reduce_18,
  1, 23, :_reduce_19,
  1, 23, :_reduce_20,
  10, 25, :_reduce_21,
  9, 25, :_reduce_22,
  11, 25, :_reduce_23,
  7, 25, :_reduce_24 ]

racc_reduce_n = 25

racc_shift_n = 55

racc_token_table = {
  false => 0,
  :error => 1,
  :TYPE => 2,
  :NAME => 3,
  :NUM => 4,
  "=" => 5,
  "if" => 6,
  "else" => 7,
  "(" => 8,
  ")" => 9,
  :OPERATOR => 10,
  ";" => 11,
  "," => 12,
  "const" => 13,
  "{" => 14,
  "}" => 15,
  "return" => 16 }

racc_nt_base = 17

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "TYPE",
  "NAME",
  "NUM",
  "\"=\"",
  "\"if\"",
  "\"else\"",
  "\"(\"",
  "\")\"",
  "OPERATOR",
  "\";\"",
  "\",\"",
  "\"const\"",
  "\"{\"",
  "\"}\"",
  "\"return\"",
  "$start",
  "s",
  "decs",
  "states",
  "decbody",
  "assignment",
  "expr",
  "rxpr",
  "if" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'test_lan.racc', 12)
  def _reduce_1(val, _values, result)
     result = Root.new("S", nil, val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'test_lan.racc', 14)
  def _reduce_2(val, _values, result)
     result = Decs.new("DECS", val[0], val[1], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'test_lan.racc', 15)
  def _reduce_3(val, _values, result)
     result = Decs.new("CONSTDEC", val[1], val[2], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'test_lan.racc', 16)
  def _reduce_4(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'test_lan.racc', 18)
  def _reduce_5(val, _values, result)
     result = DecBody.new("DECBODY", nil, Expr.new("NAME", val[0]), val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'test_lan.racc', 19)
  def _reduce_6(val, _values, result)
     result = Expr.new("NAME", val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'test_lan.racc', 20)
  def _reduce_7(val, _values, result)
     result = Expr.new("ASSIGN", nil, val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'test_lan.racc', 22)
  def _reduce_8(val, _values, result)
     result = Assign.new("=", nil, Expr.new("NAME", val[0]), val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'test_lan.racc', 24)
  def _reduce_9(val, _values, result)
     result = States.new("STATES", nil, val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'test_lan.racc', 25)
  def _reduce_10(val, _values, result)
     result = States.new("STATES", "block", val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'test_lan.racc', 26)
  def _reduce_11(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'test_lan.racc', 28)
  def _reduce_12(val, _values, result)
     result = RExpr.new("RETURN", nil, val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'test_lan.racc', 29)
  def _reduce_13(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'test_lan.racc', 31)
  def _reduce_14(val, _values, result)
     result = Expr.new("EXPR", val[1], Expr.new("NAME", val[0]), val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'test_lan.racc', 32)
  def _reduce_15(val, _values, result)
     result = Expr.new("EXPR", val[1], Expr.new("NUM", val[0]), val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'test_lan.racc', 33)
  def _reduce_16(val, _values, result)
     result = Expr.new( nil, nil, val[3], val[1], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'test_lan.racc', 34)
  def _reduce_17(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'test_lan.racc', 35)
  def _reduce_18(val, _values, result)
     result = Expr.new("NAME", val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'test_lan.racc', 36)
  def _reduce_19(val, _values, result)
     result = Expr.new("NUM", val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'test_lan.racc', 37)
  def _reduce_20(val, _values, result)
     result = Expr.new("ASSIGN", nil, val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'test_lan.racc', 40)
  def _reduce_21(val, _values, result)
     result = IfNode.new("IFELSE", nil, val[2], val[5], val[8]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'test_lan.racc', 41)
  def _reduce_22(val, _values, result)
     result = IfNode.new("IFELSE", nil, val[2], val[5], val[8]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'test_lan.racc', 42)
  def _reduce_23(val, _values, result)
     result = IfNode.new("IFELSE", nil, val[2], val[5], val[9]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'test_lan.racc', 43)
  def _reduce_24(val, _values, result)
     result = IfNode.new("IF", nil, val[2], val[5]) 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class Lang0


exe = Lang0.new
    begin
      ast = Ast.new(exe.scan_str($stdin.read))
      sym = SymbolTable.new
      ast.accept(sym)
      ast.accept(AstVisitor.new)
      p sym.table
      puts
      p sym.namespace
    rescue ParseError => e
      puts 'Parsing error'
      puts e.message
      puts e.backtrace.inspect
    end
